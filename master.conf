# nerdctlとcontainerdが使用可能な場合はコンテナ内のfishを使用する。無ければデフォルトのシェルを用いる。
# if-shell "command -v nerdctl >/dev/null && pgrep -x containerd >/dev/null" {
#     set-option -g default-command "~/.config/tmux/fish.bash"
# }

# # macで環境を構築したら確認する
# if-shell "test `uname` = 'Darwin'" {
#   # set-option -g default-command "bash"
#   # set-option -g default-command "/opt/homebrew/bin/fish"
#   # set-option -g default-command "fish --login -c /Users/kaoru.inoue/workspace/git/github.com/tin-machine/cli-tool-docker/shell.bash"
#   set-option -g default-command "~/workspace/git/github.com/tin-machine/cli-tool-docker/shell.bash"
# }
#
# # nerdctlが使用可能な場合はコンテナ内のfishを使用する。無ければデフォルトのシェルを用いる。
# if-shell "command -v nerdctl >/dev/null" {
#   set-option -g default-command "~/workspace/git/github.com/tin-machine/cli-tool-docker/shell.bash"
# }
#
# if-shell "cat /etc/os-release | grep Gentoo >/dev/null" {
#   set-option -g default-command "fish"
# }

set-environment -g PATH "/opt/homebrew/bin/:/usr/local/bin:/usr/bin:/bin"
set-option -g default-command "fish -l"

# キーバインド
bind c new-window -c "#{pane_current_path}"       # 新ウィンドウ
bind '|' split-window -hc "#{pane_current_path}"    # 縦 ペイン分割
bind '-' split-window -vc "#{pane_current_path}"  # 横 ペイン分割

# ペイン サイズ変更
# ＜Prefix＞＜Ctrl + { h | i | j | k }＞
# ＜Ctrl + { h | i | j | k }＞は連続して入力可能。
# 1回押すごとに5行(列)境界を移動させる。
bind -r C-h resize-pane -L 5
bind -r C-l resize-pane -R 5
bind -r C-j resize-pane -D 5
bind -r C-k resize-pane -U 5

# ペイン間 移動
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind-key b split-window 'tmux lsw | fzf | cut -d":" -f 1 | xargs tmux select-window -t' # fzfでウィンドー選択

# Windows内のペインの入力をシンクロする <- キーアサインが危険というか、間違って有効になってしまうケースがあって無効化
# bind s set-window-option synchronize-pane on
# bind S set-window-option synchronize-pane off

# コピーモード設定 vi
setw -g mode-keys vi # コピーモードのキーマップ。標準はemacs
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi Escape send-keys -X cancel              # コピーモードから抜ける
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle       # コピーモード中 C-v で矩形選択
bind-key -T copy-mode-vi V send-keys -X select-line              # 1行選択
bind-key -T copy-mode-vi C-a send-keys -X start-of-line          # Vi モード中に Ctrl-a で行頭に（Emacs ライク）
bind-key -T copy-mode-vi C-e send-keys -X end-of-line            # Vi モード中に Ctrl-e で行末に（Emacs ライク）
bind-key -T copy-mode-vi w send-keys -X next-word                # 単語の最初の1文字に移動
bind-key -T copy-mode-vi e send-keys -X next-word-end            # 単語の最後の1文字に移動
bind-key -T copy-mode-vi b send-keys -X previous-word            # w の逆の動き back
bind-key -T copy-mode-vi g send-keys -X top-line                 # 画面上に映る最上行に移動
bind-key -T copy-mode-vi G send-keys -X bottom-line              # 画面上に映る最下行に移動
bind-key -T copy-mode-vi / send-keys -X search-forward           # 前方検索
bind-key -T copy-mode-vi ? send-keys -X search-backward          # 後方検索
bind-key -T copy-mode-vi C-u send-keys -X scroll-up              # 視点そのまま上にスクロール
bind-key -T copy-mode-vi C-d send-keys -X scroll-down            # 視点そのまま下にスクロール
bind-key -T copy-mode-vi t send-keys -X copy-pipe-and-cancel "~/.config/tmux/translate.fish" # コピーモード中 [ t ] で 翻訳
# bind-key -T copy-mode-vi C-n send-keys -X page-up                # 前ページ
# bind-key -T copy-mode-vi C-f send-keys -X page-down              # 次ページ

# コピー用のコマンド。OSによって振る舞いを変えたい

bind-key -T copy-mode-vi y send-keys -X copy-selection \; send-keys -X cancel # デフォルトはtmuxのクリップボードに保存するだけ

#### GUI環境下で下記コマンドがインストールされている場合は、そのツールのクリップボードにも保存
if-shell 'command -v xsel &>/dev/null' {
  bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xsel -bi'
}

if-shell 'command -v xclip &>/dev/null' {
  bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -i -sel clip'
}

if-shell 'command -v pbcopy &>/dev/null' {
  bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy'
}

# word delimiters for copy mode
set-option -g word-separators ' @"=:,.()[]-_/\\\n\r'

# ペイン削除は[ x ] ウィンドー削除は[ X ]
bind-key -n M-x if "tmux display -p \"#{window_panes}\" | grep ^1\$" \
    "confirm-before -p \"ペイン削除? (y/n)\" kill-pane" \
    "kill-pane"

# キーストロークのディレイを減らす
set -sg escape-time 1

### 各セッションで保存されるバッファ数を変更。このバッファは tmux list-buffer で確認できます
set-option -g buffer-limit 10000

### how long show event display on screen
set-option -g display-time 20000

set-option -g history-limit 20000 # ウィンドウ履歴で保持される最大行数を設定します。

## ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on

### ウィンドータイトル設定
# 私はfish shell の fish_title関数で上書きしたくなったのでtmux側設定はoffにした
set -g set-titles off # 端末が xterm のようなら xterm コード e]2;...007 を使ってウィンドウタイトルを設定しようとします。
# set -g set-titles-string '#H' # キャラクタシーケンスは status-left オプションと同じように置き換えられます。

# 色をターミナルで確認する方法(bash)
# for i in {0..255}; do
#  printf "\033[48;5;%sm %3s \033[0m" "$i" "$i"
#  if (( (i + 1) % 16 == 0 )); then echo; fi
# done

# ペイン境界線スタイル
set -g pane-border-style 'bg=colour0,fg=colour238' # 非アクティブペインの境界線色
set -g pane-active-border-style 'bg=colour0,fg=colour119' # アクティブペインの境界線色（通常明るめの色にして見分けやすく）

# #I: ウィンドウ番号
# ':': 区切り文字
# #(bash ...): 独自スクリプトで加工
# #W: ウィンドウ名
# #F: ウィンドウにフラグがあると表示（例：* はアクティブペイン）
# #[fg=...]: 色変更

# 左ステータスバー
set-option -g status-left-length 70
set-option -g status-left  "\
#[bg=colour148]#[fg=colour234]#h\
#[bg=colour024]#[fg=colour148]\
#[bg=colour024]#[fg=colour234]#(hostname -I 2>/dev/null | awk '{print $1, $2}')\
#[fg=colour024]#[bg=colour234]"

# ステータスバー内のカレントウィンドーの表示
# ステータスバーのウィンドウ表示整列
set -g status-position bottom # (topも可能)
set -g status-justify centre # (left, right も可能)
set -g status-style 'bg=default' # ステータスバー全体の背景色

# アクティブウィンドウ
setw -g window-status-current-style 'bg=colour239,fg=colour234' # アクティブなウィンドウの色（強調）
setw -g window-status-current-format '\
#[fg=colour239]#[bg=colour234]\
#[bg=colour239]#[fg=colour119]#I\
#[fg=colour249]:\
#[fg=colour255]#(bash ~/.config/tmux/shortpath.sh \"#{pane_current_path}\") #W\
#[fg=colour249]#F\
#[fg=colour239]#[bg=colour234]'

# 非アクティブウィンドウ
setw -g window-status-style 'bg=colour234,fg=colour244' # 非アクティブウィンドウの背景色と前景色
setw -g window-status-format '\
#[fg=colour250]#I\
#[fg=colour237]:#[fg=colour250]#(bash ~/.config/tmux/shortpath.sh \"#{pane_current_path}\") #W\
#[fg=colour244]#F'

# 右ステータスバー
set-option -g status-right-length 60
set-option -g status-right "\
#[fg=colour148]#[bg=colour234]\
#[fg=colour234]#[bg=colour148]%Y/%m/%d(%a) %H:%M"

# ウィンドウを閉じた時に後続のウィンドウ番号が自動的に繰り上がる
set-option -g renumber-windows on

## fortunで名言を表示
set -g lock-after-time 600
set -g lock-command "~/.config/tmux/fortune.bash"

# Neovim はウインドウフォーカスの出入りをフックして autoread を発火させます。
# focus-events が off だと外部でファイルが変わっても自動で再読込されません。
# focus-events を有効にします
set-option -g focus-events on

# set-clipboard は OSC52 を tmuxが送信するために必要
# allow-passthrough は nvimなどが自前で出力する OSC52 を通すために必要（tmux 3.3 以降）
set-option -g allow-passthrough on
set-option -g set-clipboard on

# set-option -g default-terminal "tmux-256color"
set-option -g default-terminal "screen-256color-bce"

# 256色モード
# set-option -g default-terminal "screen-256color"
# これをするとTERMが変更されてしまい、その環境変数がリモート側にも転送される。
# 転送先ではscreen-256colorのTERMCAPが無いためエラーになる
set-option -as terminal-features ',xterm-256color:RGB,screen-256color-bce:RGB'

# tpmでのプラグイン
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @open-editor 'nvim'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# プラグインインストールは tmux prefix + I でインストール開始
run-shell '~/.config/tmux/tpm-install-check.sh'
run-shell '~/.config/tmux/plugins/tpm/tpm'
